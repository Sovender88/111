# utils/analysis_tools.py ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö

import pandas as pd
import streamlit as st
from scipy import stats


def detect_outliers_iqr(df: pd.DataFrame, column: str, iqr_factor: float = 1.5) -> pd.Series:
    """–í—ã—è–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ IQR"""
    try:
        q1 = df[column].quantile(0.25)
        q3 = df[column].quantile(0.75)
        iqr = q3 - q1
        return (df[column] < q1 - iqr_factor * iqr) | (df[column] > q3 + iqr_factor * iqr)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—ã–±—Ä–æ—Å–æ–≤: {e}")
        return pd.Series([False] * len(df))


def show_missing_values(df: pd.DataFrame):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–ø—É—Å–∫–æ–≤"""
    missing = df.isna().sum()
    percent = (missing / len(df) * 100).round(2)
    st.subheader("üìâ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    st.dataframe(pd.DataFrame({
        "–°—Ç–æ–ª–±–µ—Ü": missing.index,
        "–ü—Ä–æ–ø—É—Å–∫–æ–≤": missing.values,
        "%": percent.values
    }))


def show_column_summary(df: pd.DataFrame):
    """–ü–æ–∫–∞–∑ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º"""
    st.subheader("üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    summary = pd.DataFrame({
        "–ü—Ä–∏–∑–Ω–∞–∫": df.columns,
        "–¢–∏–ø": df.dtypes,
        "–°—Ä–µ–¥–Ω–µ–µ": df.mean(numeric_only=True),
        "–î–∏—Å–ø–µ—Ä—Å–∏—è": df.var(numeric_only=True),
        "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ": df.nunique()
    })
    st.dataframe(summary)


def check_duplicates(df: pd.DataFrame):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    count = df.duplicated().sum()
    st.info(f"üîÅ –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {count}")
    return count
