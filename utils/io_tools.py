import streamlit as st
import pandas as pd
import joblib
import os
from docx import Document
from docx.shared import Inches


saved_plots = []
plot_descriptions = []
@st.cache_data
def save_dataframe(df: pd.DataFrame, filename: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ CSV-—Ñ–∞–π–ª."""
    try:
        df.to_csv(filename, index=False)
        st.success(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
        return True
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False


def load_model(path: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é joblib."""
    try:
        model = joblib.load(path)
        st.success(f"üì• –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {path}")
        return model
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None


def save_model(model, path: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –≤ —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é joblib."""
    try:
        joblib.dump(model, path)
        st.success(f"üì§ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {path}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")


def export_to_word(output_file="edu_monitor_report.docx", standard_text=None):
    try:
        doc = Document()
        doc.add_heading("–û—Ç—á—ë—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—É–∑–æ–≤", 0)

        doc.add_paragraph(
            standard_text or (
                "–û—Ç—á—ë—Ç –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞, –≤–∫–ª—é—á–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏, –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."
            )
        )

        doc.add_heading("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", level=1)
        for path, description in zip(saved_plots, plot_descriptions):
            if os.path.exists(path):
                doc.add_paragraph(description)
                doc.add_picture(path, width=Inches(6))
        doc.save(output_file)
        st.success(f"–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {output_file}")
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
        return False


def clear_saved_plots():
    try:
        for file in os.listdir("plots"):
            os.remove(os.path.join("plots", file))
        saved_plots.clear()
        plot_descriptions.clear()
        st.info("–û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        return False


def detect_outliers(df: pd.DataFrame, column: str, iqr_factor: float = 1.5):
    try:
        q1 = df[column].quantile(0.25)
        q3 = df[column].quantile(0.75)
        iqr = q3 - q1
        return (df[column] < q1 - iqr_factor * iqr) | (df[column] > q3 + iqr_factor * iqr)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—ã–±—Ä–æ—Å–æ–≤: {e}")
        return None
