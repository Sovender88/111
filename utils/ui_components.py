# utils/ui_components.py ‚Äî –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Streamlit UI

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns


def render_data_exploration_ui(df: pd.DataFrame):
    if df is None or df.empty:
        st.warning("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏"):
        missing = df.isna().sum()
        st.dataframe(pd.DataFrame({
            "–°—Ç–æ–ª–±–µ—Ü": missing.index,
            "–ü—Ä–æ–ø—É—Å–∫–æ–≤": missing.values,
            "%": (missing / len(df) * 100).round(2)
        }))

    feature = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã", df.select_dtypes(include=[np.number]).columns)
    if st.button("üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", key="dist_btn"):
        fig, ax = plt.subplots()
        sns.histplot(df[feature], kde=True, ax=ax, color='skyblue')
        ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {feature}")
        st.pyplot(fig)
        plt.close(fig)

    if st.button("üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", key="summary_btn"):
        summary = pd.DataFrame({
            "–ü—Ä–∏–∑–Ω–∞–∫": df.columns,
            "–¢–∏–ø": df.dtypes,
            "–°—Ä–µ–¥–Ω–µ–µ": df.mean(numeric_only=True),
            "–î–∏—Å–ø–µ—Ä—Å–∏—è": df.var(numeric_only=True),
            "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ": df.nunique()
        })
        st.dataframe(summary)

    if st.button("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã", key="dup_btn"):
        count = df.duplicated().sum()
        st.info(f"üîÅ –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {count}")

    if st.button("üßπ –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã", key="clean_btn"):
        df_clean = df.drop_duplicates()
        st.session_state.df_clean = df_clean
        st.success(f"üßπ –î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã. –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {df_clean.shape}")


def render_clustering_visuals(df: pd.DataFrame, clusters: np.ndarray):
    if df is None or clusters is None:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏")
        return

    numeric_cols = df.select_dtypes(include=[np.number]).columns.drop("–ö–ª–∞—Å—Ç–µ—Ä", errors="ignore")

    st.subheader("üìå –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è (Plotly)")
    col1, col2 = st.columns(2)
    with col1:
        x = st.selectbox("X –æ—Å—å", numeric_cols, key="scatter_x")
    with col2:
        y = st.selectbox("Y –æ—Å—å", numeric_cols, key="scatter_y")

    if st.button("üìà –ü–æ—Å—Ç—Ä–æ–∏—Ç—å scatter plot"):
        df_plot = df.copy()
        df_plot["–ö–ª–∞—Å—Ç–µ—Ä"] = clusters
        fig = px.scatter(
            df_plot, x=x, y=y, color="–ö–ª–∞—Å—Ç–µ—Ä",
            title=f"–ö–ª–∞—Å—Ç–µ—Ä—ã: {x} vs {y}", height=600
        )
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("üì¶ BoxPlot")
    feat = st.selectbox("–ü—Ä–∏–∑–Ω–∞–∫ –¥–ª—è boxplot", numeric_cols, key="boxplot_feat")
    if st.button("üì¶ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å boxplot"):
        df_plot = df.copy()
        df_plot["–ö–ª–∞—Å—Ç–µ—Ä"] = clusters
        fig = px.box(
            df_plot, x="–ö–ª–∞—Å—Ç–µ—Ä", y=feat, color="–ö–ª–∞—Å—Ç–µ—Ä",
            title=f"BoxPlot –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º: {feat}", height=600
        )
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
    if st.button("üìâ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"):
        cluster_counts = pd.Series(clusters).value_counts().sort_index()
        fig = px.bar(
            x=cluster_counts.index, y=cluster_counts.values,
            labels={"x": "–ö–ª–∞—Å—Ç–µ—Ä", "y": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"},
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º", height=500
        )
        st.plotly_chart(fig, use_container_width=True)
