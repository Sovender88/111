import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import pandas as pd
from utils import io_tools
import numpy as np


def plot_histogram(df, feature):
    fig, ax = plt.subplots()
    sns.histplot(df[feature], kde=True, ax=ax, color='skyblue')
    ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {feature}")
    st.pyplot(fig)
    plt.close(fig)


def render_data_exploration_ui(df: pd.DataFrame):
    if df is None or df.empty:
        st.warning("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    if st.button("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"):
        missing = df.isna().sum()
        st.dataframe(pd.DataFrame({
            "–°—Ç–æ–ª–±–µ—Ü": missing.index,
            "–ü—Ä–æ–ø—É—Å–∫–æ–≤": missing.values,
            "%": (missing / len(df) * 100).round(2)
        }))

    feature = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã", df.select_dtypes(include=[np.number]).columns)
    if st.button("üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", key="dist_btn"):
        fig, ax = plt.subplots()
        sns.histplot(df[feature], kde=True, ax=ax, color='skyblue')
        ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {feature}")
        st.pyplot(fig)
        plt.close(fig)

    if st.button("üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", key="summary_btn"):
        summary = pd.DataFrame({
            "–ü—Ä–∏–∑–Ω–∞–∫": df.columns,
            "–¢–∏–ø": df.dtypes,
            "–°—Ä–µ–¥–Ω–µ–µ": df.mean(numeric_only=True),
            "–î–∏—Å–ø–µ—Ä—Å–∏—è": df.var(numeric_only=True),
            "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ": df.nunique()
        })
        st.dataframe(summary)

    if st.button("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã", key="dup_btn"):
        count = df.duplicated().sum()
        st.info(f"–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {count}")

    if st.button("üßπ –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã", key="clean_btn"):
        df_clean = df.drop_duplicates()
        st.session_state.df_clean = df_clean
        st.success(f"–î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã. –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {df_clean.shape}")
        io_tools.save_dataframe(df_clean, "data/processed_data.csv")


def render_clustering_visuals(df, clusters):
    numeric_cols = df.select_dtypes(include=[np.number]).columns.drop("–ö–ª–∞—Å—Ç–µ—Ä", errors='ignore')

    st.subheader("–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è")
    x = st.selectbox("X –æ—Å—å", numeric_cols, key="scatter_x")
    y = st.selectbox("Y –æ—Å—å", numeric_cols, key="scatter_y")
    if st.button("üìà –ü–æ—Å—Ç—Ä–æ–∏—Ç—å scatter plot"):
        fig, ax = plt.subplots()
        sns.scatterplot(data=df, x=x, y=y, hue=clusters, palette="deep", s=100, ax=ax)
        ax.set_title(f"–ö–ª–∞—Å—Ç–µ—Ä—ã: {x} vs {y}")
        st.pyplot(fig)
        plt.close(fig)

    st.subheader("üì¶ Box plot")
    feat = st.selectbox("–ü—Ä–∏–∑–Ω–∞–∫", numeric_cols, key="boxplot")
    if st.button("üéØ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å box plot"):
        df_plot = df.copy()
        df_plot['–ö–ª–∞—Å—Ç–µ—Ä'] = clusters
        fig, ax = plt.subplots()
        sns.boxplot(x='–ö–ª–∞—Å—Ç–µ—Ä', y=feat, data=df_plot, palette="deep", ax=ax)
        st.pyplot(fig)
        plt.close(fig)

    st.subheader("üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
    if st.button("üìâ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É"):
        fig, ax = plt.subplots()
        sns.countplot(x=clusters, palette="deep", ax=ax)
        ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
        st.pyplot(fig)
        plt.close(fig)