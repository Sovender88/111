# utils/decorators.py ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã

import streamlit as st
import time
from functools import wraps


def handle_errors(func):
    """–û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å –≤—ã–≤–æ–¥–æ–º –≤ Streamlit."""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ '{func.__name__}': {e}")
            return None
    return wrapper


def timeit(func):
    """–ò–∑–º–µ—Ä—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏."""
    @wraps(func)
    def wrapper(*args, **kwargs):
        start = time.perf_counter()
        result = func(*args, **kwargs)
        duration = time.perf_counter() - start
        st.info(f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è '{func.__name__}': {duration:.2f} —Å–µ–∫")
        return result
    return wrapper


def log_step(message: str):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏."""
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            st.write(f"üîπ {message}")
            return func(*args, **kwargs)
        return wrapper
    return decorator
