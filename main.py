import streamlit as st

from config import EGE_TARGET, NIOKR_TARGET
from state_manager import SessionStateManager
from pipeline import DataPipeline
from models import ModelManager
from visualization import Visualizer
from utils import globals as g
from utils.report_generator import export_to_word
from utils.ui_components import render_data_exploration_ui, render_clustering_visuals


def main():
    st.set_page_config(page_title="EduMonitor", layout="wide")
    st.title("üéì EduMonitor: –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—É–∑–æ–≤")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    SessionStateManager.initialize()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    pipeline = DataPipeline()
    models = ModelManager()
    visualizer = Visualizer()

    # –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    with st.expander("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞", expanded=not st.session_state.data_loaded):
        df = pipeline.handle_data_upload()
        if df is not None:
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            st.write(df.head())

    if not st.session_state.data_loaded:
        st.info("üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª .xlsx")
        return

    # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    task = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", [
        "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
        "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ï–ì–≠",
        "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ù–ò–û–ö–†",
        "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è",
        "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞"
    ])

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    df_clean = st.session_state.get("df_clean")

    if task == "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö":
        render_data_exploration_ui(df_clean)

    elif task == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ï–ì–≠":
        models.train_regression_ui(df_clean, EGE_TARGET, "ege", log_transform=False,
                                   title="üìä –ü—Ä–æ–≥–Ω–æ–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –ï–ì–≠")

    elif task == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ù–ò–û–ö–†":
        models.train_regression_ui(df_clean, NIOKR_TARGET, "niokr", log_transform=True, title="üß™ –ü—Ä–æ–≥–Ω–æ–∑ –æ–±—ä–µ–º–∞ –ù–ò–û–ö–†")



    elif task == "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è":

        st.subheader("üîó –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –≤—É–∑–æ–≤")

        n_clusters = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", 2, 10, 3)

        if st.button("üìä –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞—Ç—å"):
            clustered_df, clusters = pipeline.clusterize(df_clean, n_clusters)

            st.session_state["cluster_df"] = clustered_df

            st.session_state["clusters"] = clusters

            st.session_state["cluster_ready"] = True

        # –µ—Å–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

        if st.session_state.get("cluster_ready"):
            render_clustering_visuals(

                st.session_state["cluster_df"],

                st.session_state["clusters"]

            )

    elif task == "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞":
        visualizer.plot_correlation_heatmap(df_clean)

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏
    with st.sidebar.expander("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏"):
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏"):
            models.save_all()
        if st.button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏"):
            models.load_all()

    # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
    with st.sidebar.expander("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"):
        text = st.text_area("–¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞", height=150)
        if st.button("üì• –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Word"):
            if g.saved_plots:
                if export_to_word("edu_monitor_report.docx", text or None):
                    with open("edu_monitor_report.docx", "rb") as f:
                        st.download_button("üìé –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç", f, file_name="edu_monitor_report.docx")
            else:
                st.warning("–ù–µ—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

    # –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    with st.sidebar.expander("üßπ –û—á–∏—Å—Ç–∫–∞"):
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏"):
            g.saved_plots.clear()
            g.plot_descriptions.clear()
            st.success("–ì—Ä–∞—Ñ–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã")


if __name__ == "__main__":
    main()
