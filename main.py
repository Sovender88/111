import streamlit as st

from state_manager import SessionStateManager
from config import EGE_TARGET, NIOKR_TARGET
from pipeline import DataPipeline
from models import ModelManager
from visualization import Visualizer

from utils.ui_components import render_data_exploration_ui, render_clustering_visuals
from utils.report_generator import export_to_word
from utils.analysis_tools import clear_saved_plots


def main():
    st.set_page_config(page_title="EduMonitor", layout="wide")
    st.title("üéì EduMonitor ‚Äî –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—É–∑–æ–≤")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    SessionStateManager.initialize()
    pipeline = DataPipeline()
    models = ModelManager()
    visualizer = Visualizer()

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    if not st.session_state.data_loaded:
        with st.expander("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞", expanded=True):
            df = pipeline.handle_data_upload()
            if df is not None:
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                # –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                st.session_state.data_loaded = True
                st.session_state.df_clean = df
                st.rerun()
        return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

    # --- –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã ---
    # –ö–æ–ø–∏—Ä—É–µ–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    df_filtered = st.session_state.df_clean.copy()

    # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º —Å—Ç–æ–ª–±—Ü–∞–º ---
    st.sidebar.subheader("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    cat_cols = df_filtered.select_dtypes(include=["object", "category", "bool"]).columns

    for col in cat_cols:
        unique_vals = df_filtered[col].dropna().unique().tolist()
        if 1 < len(unique_vals) < 50:
            selected_vals = st.sidebar.multiselect(f"{col}", unique_vals, default=unique_vals)
            if selected_vals:
                df_filtered = df_filtered[df_filtered[col].isin(selected_vals)]

    st.session_state.df_filtered = df_filtered

    # --- –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ ---
    task = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É", [
        "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
        "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ï–ì–≠",
        "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ù–ò–û–ö–†",
        "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è",
        "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞"
    ])

    # --- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---
    if task == "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö":
        render_data_exploration_ui(df_filtered)

    elif task == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ï–ì–≠":
        models.train_regression_ui(
            df=df_filtered,
            target_col=EGE_TARGET,
            model_key="ege",
            log_transform=False,
            title="üî¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –ï–ì–≠"
        )

    elif task == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ù–ò–û–ö–†":
        models.train_regression_ui(
            df=df_filtered,
            target_col=NIOKR_TARGET,
            model_key="niokr",
            log_transform=True,
            title="üåê –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–±—ä–µ–º–∞ –ù–ò–û–ö–†"
        )

    elif task == "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è":
        with st.expander("üìä –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –≤—É–∑–æ–≤", expanded=True):
            n_clusters = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", 2, 10, 3)
            if st.button("üìç –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞—Ç—å"):
                df_clustered, clusters = pipeline.clusterize(df_filtered, n_clusters)
                render_clustering_visuals(df_clustered, clusters)

    elif task == "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞":
        visualizer.plot_correlation_heatmap(df_filtered)

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏ ---
    with st.sidebar.expander("üì¶ –ú–æ–¥–µ–ª–∏"):
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª–∏"):
            models.save_all()
        if st.button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏"):
            models.load_all()

    # --- –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ ---
    with st.sidebar.expander("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Word"):
        user_text = st.text_area("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç—á–µ—Ç—É", height=150)
        if st.button("üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
            plots = st.session_state.get("saved_plots", [])
            if plots:
                if export_to_word("edu_monitor_report.docx", user_text or None):
                    with open("edu_monitor_report.docx", "rb") as f:
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                            data=f,
                            file_name="edu_monitor_report.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
            else:
                st.warning("‚ö†Ô∏è –ù–µ—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")

    # --- –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
    with st.sidebar.expander("üßº –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"):
        if st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏"):
            clear_saved_plots()


if __name__ == "__main__":
    main()
